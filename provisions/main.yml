---

- hosts: all
  user: vagrant
  sudo: false

  # vars:
  #   PORT_NUM: 6543

  tasks:

    # - name: WHOAMI registering
    #   command: whoami 
    #   sudo: false
    #   register: whoami

    # - action: shell whoami
    #   register: whoami

  #   # by having a tag we can narrow down a specific group of tasks
  #   # during configuration.
    - name: update cache / upgrade pkgs
      sudo: true
      apt: update_cache=yes upgrade=dist cache_valid_time=3600
      tags:
        - apt

    # - name: allow bash profile to be loaded by ssh
    #   sudo: false
    #   lineinfile: dest=~/.bashrc regexp='[ -z "$PS1" ] && return' line='# [ -z "$PS1" ] && return' state=present
    #   # when: {{ ansible_pkg_mgr }} == "apt"

  #   # combined install of these packages as vagrant reconnects for each task (this should speed things up!)
    - name: install dev pkgs / EMP stack
      sudo: true
      apt: pkg={{ item }}
      with_items:
        - build-essential
        - linux-generic 
        # - python-dev
        # - libevent-dev
        # - python-pip
        # - python-setuptools
        - nfs-common
        - nfs-kernel-server
        - rpcbind
        - curl
        - vim
        - htop
        - git-core
        - mysql-server
        - mysql-client
        - python-apt
        - python-mysqldb
        - nginx
        - php5-fpm
        - php5-mysql
        - php5-cli
        - php5-curl
        - php5-mcrypt
        - php5-sqlite
        # - dnsmasq
      tags:
        - apt
        - mysql
        - nginx
        - php

    # - name: install mysql/nginx/php (EMP stack)
    #   apt: pkg=$item
    #   with_items:
    #      - mysql-server
    #      - mysql-client
    #      - nginx
    #      - php5-fpm 
    #      - php5-mysql
    #   tags:
    #     - mysql
    #     - nginx

    # - name: pip install stuff
    #   pip: name=$item
    #   with_items:
    #      - distribute
    #      - virtualenv
         # - ansible

    - name: configure nginx startup
      sudo: true
      template: src=configs/nginx-conf/nginx.j2 dest=/etc/nginx/nginx.conf
      tags:
       - nginx

    - name: configure nginx default
      sudo: true
      template: src=configs/nginx-conf/default.j2 dest=/etc/nginx/sites-enabled/default
      tags:
        - nginx

    - name: Create global directory for nginx config files
      sudo: true
      file: state=directory path=/etc/nginx/global owner=root group=root mode=0644

    - name: Add nginx restrictions file
      sudo: true
      template: src=configs/nginx-conf/restrictions.j2 dest=/etc/nginx/global/restrictions.conf owner=root group=root mode=0644 
      tags:
        - nginx

    - name: Add Wordpress specific configuration file
      sudo: true
      template: src=configs/nginx-conf/wordpress.j2 dest=/etc/nginx/global/wordpress.conf owner=root group=root mode=0644
      tags:
        - nginx

    - name: setup custom.roadsideweb.com
      sudo: true
      template: src=configs/nginx-conf/custom.roadsideweb.com.j2 dest=/etc/nginx/sites-enabled/custom.roadsideweb.com owner=root group=root mode=0644
      tags:
        - nginx



    - name: copy php.ini to wp-admin folder
      sudo: true
      file: src=/etc/php5/fpm/php.ini dest=/var/www/custom.roadsideweb.dev/public_html/wp-admin/


    #     # this currently causes a known issue in ansible, fix coming soon, works in 1.4 from git
    # - name: configure php5 www.conf default
    #   sudo: true
    #   template: src=configs/php-conf/www.j2 dest=/etc/php5/fpm/pool.d/www.conf owner=root group=root mode=0644 
    #   tags:
    #     - php

    - name: change mysql to low memory settings
      sudo: true
      template: src=configs/mysql-conf/my.j2 dest=/etc/mysql/my.cnf owner=root group=root mode=0644
      tags:
        - nginx


    # - name: Set phpfpm to listen on TCP port instead of unix socket
    #   lineinfile: "dest=/etc/php5/fpm/pool.d/www.conf regexp='^listen = /var/run/php5-fpm.sock' line='listen = 127.0.0.1:9000'"


      # not necessary with rewritten www.conf
    - name: Set phpfpm to listen on unix socket instead of TCP port
      sudo: true
      lineinfile: "dest=/etc/php5/fpm/pool.d/www.conf
        regexp='^listen = 127.0.0.1:9000'
        line='listen = /var/run/php5-fpm.sock'"

    - name: Turn on PHP error reporting
      sudo: true
      lineinfile: "dest=/etc/php5/fpm/php.ini
        regexp='^display_errors = Off'
        line='display_errors = On'"

    # WP Fix im php.ini 
    # See: http://codex.wordpress.org/Nginx
    - name: Turn off cgi.fix_pathinfo for WP compatability
      sudo: true
      lineinfile: "dest=/etc/php5/fpm/php.ini
        regexp='^;cgi.fix_pathinfo=1'
        line='cgi.fix_pathinfo = 0;'"

    - name: increase maximum upload size to 64mb for wordpress
      sudo: true
      lineinfile: "dest=/etc/php5/fpm/php.ini
        regexp='^upload_max_filesize = 2M'
        line='upload_max_filesize = 64M;'"

    - name: increase maximum post size to 64mb for wordpress
      sudo: true
      lineinfile: "dest=/etc/php5/fpm/php.ini
        regexp='^post_max_size = 8M'
        line='post_max_size = 64M;'"


    # - name: Create database user
    #   action: mysql_user user=wp_user password=12345 priv=*.*:ALL state=present

    # - name: Create database
    #   action: mysql_db db=wp_db state=present

    # - name: install mysql
    #   command: mysql_secure_installation
    #   tags:
    #     - mysql

          # # VirtualBox - http://www.virtualbox.org
          # # Run this command: wget -q http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc -O- | sudo apt-key add -
            #  deb http://download.virtualbox.org/virtualbox/debian precise contrib


      # - name: set up php-fpm
      #   command: cp /etc/php5/fpm/pool.d/www.conf /var/www/$WHOAMI/conf/php5-fpm-pool.conf
      #   command: mv /etc/php5/fpm/pool.d/www.conf /etc/php5/fpm/pool.d/www.conf.off
      #   command: ln -s /var/www/$WHOAMI/conf/php5-fpm-pool.conf /etc/php5/fpm/pool.d/$WHOAMI.conf
      #   tags:
      #     - php-fpm


      # - name: install mysql
      #   action: shell mysql_secure_installation sudo=true
      #   tags:
      #     - mysql

              # this doesn't work yet
        # - name: change root password
        #   user: name=root password="password"

      # - name: Ensure vagrant user is allowed to sudo
        # lineinfile: dest={{ sudoers_path }} create=yes regexp="vagrant"
        # line="vagrant ALL=NOPASSWD:ALL" state=present

    # - name: set up working directory
    #   command: mkdir -p /var/www/{$whoami.stdout}/public/


    ## this nginx configuring is untested, comment out if destruction ensues
    # - name: nginx configuring
    #   command: cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.orig
    #   command: sudo sed -i '/index index.html index.htm;/c\index index.html index.htm index.php;' /etc/nginx/sites-available/default
    #   command: sudo echo "location ~ .php$ { fastcgi_split_path_info ^(.+.php)(/.+)$; fastcgi_pass unix:/var/run/php5-fpm.sock; fastcgi_index index.php; include fastcgi_params; }" /etc/nginx/sites-available/default
    #   tags:
    #     - nginx

    # - name: enable php-fpm socket
    #   command: cp /etc/php5/fpm/pool.d/www.conf /etc/php5/fpm/pool.d/www.conf.orig
    #   command: sudo sed -i '/listen = 127.0.0.1:9000/c\listen = \/var\/run\/php5-fpm.sock' /etc/php5/fpm/pool.d/www.conf
    #   tags:
    #     - php


    - name: install composer
      sudo: false
      action: shell curl -s https://getcomposer.org/installer | php
      # command: wget http://getcomposer.org/composer.phar
      tags:
        - pomander

    - name: move composer executable to /usr/local/bin
      sudo: true
      # copy: src=/home/vagrant/composer.phar dest=/usr/local/bin/composer
      command: sudo mv composer.phar /usr/local/bin/composer
      tags:
        - pomander

    - name: install pomander
      sudo: false
      command: composer global require pomander/pomander:@stable
      tags:
        - pomander

    - name: install pomander-wordpress
      sudo: false
      command: composer global require pomander/wordpress:@stable
      tags:
        - pomander

    - name: create symlink for pomander
      sudo: true
      file: src=/home/vagrant/.composer/vendor/bin/pom dest=/usr/local/bin/pom state=link

    - name: add composer/pomander to path
      sudo: false
      lineinfile: dest=~/.bash_profile
        regexp=''
        state=present
        insertafter=EOF
        create=yes
        line="$HOME/.composer/vendor/bin:$PATH"
      # command: echo 'export PATH="$HOME/.composer/vendor/bin:$PATH"' >> ~/.bash_profile
      # command: exit
      tags:
        - pomander

    # - name: reload bash for pomander
    #   sudo: true
    #   action: shell bash
    #   tags:
    #     - pomander




    - name: restart nginx
      sudo: true
      service: name=nginx state=restarted
      tags:
        - nginx


    - name: restart php-fpm
      sudo: true
      service: name=php5-fpm state=restarted
      tags:
        - php

